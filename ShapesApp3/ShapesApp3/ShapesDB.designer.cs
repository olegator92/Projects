#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShapesApp3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ShapesDB")]
	public partial class ShapesDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertShapeType(ShapeType instance);
    partial void UpdateShapeType(ShapeType instance);
    partial void DeleteShapeType(ShapeType instance);
    partial void InsertShape(Shape instance);
    partial void UpdateShape(Shape instance);
    partial void DeleteShape(Shape instance);
    #endregion
		
		public ShapesDBDataContext() : 
				base(global::ShapesApp3.Properties.Settings.Default.ShapesDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ShapesDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShapesDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShapesDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ShapesDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ShapeType> ShapeTypes
		{
			get
			{
				return this.GetTable<ShapeType>();
			}
		}
		
		public System.Data.Linq.Table<Shape> Shapes
		{
			get
			{
				return this.GetTable<Shape>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShapeTypes")]
	public partial class ShapeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private EntitySet<Shape> _Shapes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public ShapeType()
		{
			this._Shapes = new EntitySet<Shape>(new Action<Shape>(this.attach_Shapes), new Action<Shape>(this.detach_Shapes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShapeType_Shape", Storage="_Shapes", ThisKey="Id", OtherKey="ShapeTypeId")]
		public EntitySet<Shape> Shapes
		{
			get
			{
				return this._Shapes;
			}
			set
			{
				this._Shapes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shapes(Shape entity)
		{
			this.SendPropertyChanging();
			entity.ShapeType = this;
		}
		
		private void detach_Shapes(Shape entity)
		{
			this.SendPropertyChanging();
			entity.ShapeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shapes")]
	public partial class Shape : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ShapeTypeId;
		
		private string _Name;
		
		private System.Nullable<double> _A;
		
		private System.Nullable<double> _B;
		
		private System.Nullable<double> _R;
		
		private EntityRef<ShapeType> _ShapeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnShapeTypeIdChanging(int value);
    partial void OnShapeTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAChanging(System.Nullable<double> value);
    partial void OnAChanged();
    partial void OnBChanging(System.Nullable<double> value);
    partial void OnBChanged();
    partial void OnRChanging(System.Nullable<double> value);
    partial void OnRChanged();
    #endregion
		
		public Shape()
		{
			this._ShapeType = default(EntityRef<ShapeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShapeTypeId", DbType="Int NOT NULL")]
		public int ShapeTypeId
		{
			get
			{
				return this._ShapeTypeId;
			}
			set
			{
				if ((this._ShapeTypeId != value))
				{
					if (this._ShapeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShapeTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeTypeId = value;
					this.SendPropertyChanged("ShapeTypeId");
					this.OnShapeTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A", DbType="Float")]
		public System.Nullable<double> A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this.OnAChanging(value);
					this.SendPropertyChanging();
					this._A = value;
					this.SendPropertyChanged("A");
					this.OnAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B", DbType="Float")]
		public System.Nullable<double> B
		{
			get
			{
				return this._B;
			}
			set
			{
				if ((this._B != value))
				{
					this.OnBChanging(value);
					this.SendPropertyChanging();
					this._B = value;
					this.SendPropertyChanged("B");
					this.OnBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R", DbType="Float")]
		public System.Nullable<double> R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this.OnRChanging(value);
					this.SendPropertyChanging();
					this._R = value;
					this.SendPropertyChanged("R");
					this.OnRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShapeType_Shape", Storage="_ShapeType", ThisKey="ShapeTypeId", OtherKey="Id", IsForeignKey=true)]
		public ShapeType ShapeType
		{
			get
			{
				return this._ShapeType.Entity;
			}
			set
			{
				ShapeType previousValue = this._ShapeType.Entity;
				if (((previousValue != value) 
							|| (this._ShapeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShapeType.Entity = null;
						previousValue.Shapes.Remove(this);
					}
					this._ShapeType.Entity = value;
					if ((value != null))
					{
						value.Shapes.Add(this);
						this._ShapeTypeId = value.Id;
					}
					else
					{
						this._ShapeTypeId = default(int);
					}
					this.SendPropertyChanged("ShapeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
